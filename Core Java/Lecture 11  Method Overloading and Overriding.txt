PolyMorphism:

### **Lecture 11: Method Overloading and Overriding in Java**  

---

### **1. Method Overloading:**  
Method overloading occurs when **multiple methods in the same class** have the **same name** but **different parameters** (either in the number of parameters or their types).  
- **Key Points:**  
  - Occurs within a **single class**.  
  - **Compile-time polymorphism.**  
  - Methods must have **different parameter lists**.  
- **Real-World Example:**  
  - **Calculator**: A calculator may have multiple `add()` methods to add **integers**, **floats**, or **multiple numbers**.  

#### **Code Example:**  

class Calculator {
    // Adding two integers
    int add(int a, int b) {
        return a + b;
    }

    // Adding two floats
    float add(float a, float b) {
        return a + b;
    }

    // Adding three integers
    int add(int a, int b, int c) {
        return a + b + c;
    }
}

public class OverloadingExample {
    public static void main(String[] args) {
        Calculator calc = new Calculator();
        
        System.out.println("Sum of 2 integers: " + calc.add(5, 10));       // int version
        System.out.println("Sum of 2 floats: " + calc.add(5.5f, 3.3f));    // float version
        System.out.println("Sum of 3 integers: " + calc.add(1, 2, 3));     // 3-arg version
    }
}

**Output:**  

Sum of 2 integers: 15  
Sum of 2 floats: 8.8  
Sum of 3 integers: 6  


#### **Explanation:**  
- **Method Name:** `add()`  
- **Different Parameters:**  
  - Two integers  
  - Two floats  
  - Three integers  
- The **appropriate method** is called based on the arguments passed.  

---

### **2. Method Overriding:**  
Method overriding occurs when a **child class** provides a **specific implementation** of a method that is already defined in its **parent class**.  
- **Key Points:**  
  - Requires **inheritance**.  
  - **Runtime polymorphism.**  
  - Methods must have the **same name, return type, and parameters**.  
- **Real-World Example:**  
  - **Animal Sounds**: Different animals make different sounds, so the `makeSound()` method is overridden.  

#### **Code Example:**  

// Parent class
class Animal {
    void makeSound() {
        System.out.println("Some generic animal sound");
    }
}

// Child class Dog
class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Bark");
    }
}

// Child class Cat
class Cat extends Animal {
    @Override
    void makeSound() {
        System.out.println("Meow");
    }
}

public class OverridingExample {
    public static void main(String[] args) {
        Animal myDog = new Dog();  // Upcasting
        Animal myCat = new Cat();
        
        myDog.makeSound();  // Calls Dog's method
        myCat.makeSound();  // Calls Cat's method
    }
}

**Output:**  

Bark  
Meow  


#### **Explanation:**  
- **Method Name:** `makeSound()`  
- **Same Method Signature** in parent and child classes.  
- **@Override** annotation indicates method overriding.  
- **Polymorphism:** At runtime, the correct method is called based on the object type.  

---

### **Difference Between Overloading and Overriding:**  

| Feature               | Method Overloading               | Method Overriding                 |
|----------------------|----------------------------------|----------------------------------|
| Class Relationship    | Same class                        | Different classes (inheritance)   |
| Polymorphism          | Compile-time                      | Runtime                           |
| Method Signature      | Different                         | Same                              |
| Return Type           | Can be different                   | Must be the same                   |
| Use Case              | To perform similar tasks with variations | To provide a specific implementation |

---

### **Real-World Analogy:**  

- **Method Overloading (Compile-Time):**  
  - Like an **ATM machine** that allows you to withdraw money using a **debit card**, **credit card**, or **QR code**.  
  - The **operation (withdraw)** is the same, but **input (card type)** varies.  

- **Method Overriding (Runtime):**  
  - A **universal remote control** that works differently with **TV**, **AC**, and **Music System**.  
  - Pressing the **power button** will **turn on** the respective device depending on the mode (TV, AC, or Music).  

---

### **Key Takeaways:**  
1. **Overloading** is about having **methods with the same name but different parameters** in the same class.  
2. **Overriding** is about a **subclass providing a specific implementation** of a method already present in the parent class.  
3. **Polymorphism:**  
   - Overloading: **Compile-Time (Static)**  
   - Overriding: **Runtime (Dynamic)**  
4. Use **overloading** when you want a method to work in **multiple ways**.  
5. Use **overriding** when you want to **change the behavior** of a method in a **child class**.  
