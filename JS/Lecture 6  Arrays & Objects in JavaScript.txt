### **Lecture 6: Arrays & Objects in JavaScript**  

#### **1. Introduction to Arrays and Objects**  
- Arrays store multiple values in a single variable.  
- Objects store data in key-value pairs.  

---

### **2. Arrays in JavaScript**  

#### **a) Creating an Array**  
Arrays can be created using square brackets `[]`.  

let fruits = ["Apple", "Banana", "Mango"];
console.log(fruits);

#### **b) Accessing Array Elements**  
Elements are accessed using index numbers (starting from 0).  

console.log(fruits[0]); // Output: Apple
console.log(fruits[2]); // Output: Mango

#### **c) Array Methods**  
| Method | Description | Example |
|--------|------------|---------|
| `push()` | Adds an element to the end | `fruits.push("Orange")` |
| `pop()` | Removes the last element | `fruits.pop()` |
| `shift()` | Removes the first element | `fruits.shift()` |
| `unshift()` | Adds an element to the beginning | `fruits.unshift("Grapes")` |
| `splice()` | Adds/removes elements at a position | `fruits.splice(1, 1, "Pineapple")` |
| `slice()` | Returns a portion of an array | `fruits.slice(1, 3)` |
| `indexOf()` | Finds the index of an element | `fruits.indexOf("Mango")` |
| `includes()` | Checks if an element exists | `fruits.includes("Banana")` |
| `reverse()` | Reverses the array | `fruits.reverse()` |
| `sort()` | Sorts the array | `fruits.sort()` |

Example:  

let numbers = [10, 20, 30];
numbers.push(40);
console.log(numbers); // Output: [10, 20, 30, 40]

---

### **3. Looping Through an Array**  
We can use loops to iterate through an array.  

#### **a) Using a `for` Loop**  

let colors = ["Red", "Green", "Blue"];
for (let i = 0; i < colors.length; i++) {
    console.log(colors[i]);
}

#### **b) Using `forEach()` Method**  

colors.forEach(function(color) {
    console.log(color);
});

#### **c) Using `map()` Method (Returns a New Array)**  

let numbers = [1, 2, 3];
let squares = numbers.map(num => num * num);
console.log(squares); // Output: [1, 4, 9]


---

### **4. Objects in JavaScript**  

#### **a) Creating an Object**  
Objects are key-value pairs enclosed in `{}`.  

let person = {
    name: "Ks",
    age: 25,
    city: "New York"
};
console.log(person);

#### **b) Accessing Object Properties**  

console.log(person.name);  // Output: ks
console.log(person["age"]); // Output: 25

#### **c) Adding and Updating Properties**  

person.country = "USA";  // Adding a new property
person.age = 30; // Updating an existing property
console.log(person);

#### **d) Deleting a Property**  

delete person.city;
console.log(person);

---

### **5. Looping Through an Object**  
We can use a `for-in` loop to iterate through object properties.  

for (let key in person) {
    console.log(key + ": " + person[key]);
}

---

### **6. Object Methods**  
Functions inside an object are called **methods**.  

let student = {
    name: "Alice",
    age: 20,
    greet: function() {
        console.log("Hello, my name is " + this.name);
    }
};
student.greet();


---

### **7. Array of Objects**  

let students = [
    { name: "Dipesh", age: 20 },
    { name: "Divakar", age: 22 }
];
console.log(students[0].name); // Output: Dipesh

---

### **8. Practical Examples**  
1. Create an array of student names and loop through it using `forEach()`.  
2. Use `map()` to create a new array with numbers squared.  
3. Create an object to store details of a car (brand, model, year) and print its properties.  
4. Add a method inside an object that returns a greeting message.  
5. Create an array of objects representing employees and loop through them using `for-of`.
