
## **Lecture 5: Handling Side Effects in React (Using `useEffect`)**

###  Topics:

* What are side effects?
* Why use `useEffect`?
* Basic syntax and usage
* Fetching data with `useEffect`
* Cleanup function

---

###  **What is a Side Effect?**

A **side effect** is any operation that affects something outside the component:

* Fetching data from API
* Setting up timers or intervals
* Direct DOM manipulations
* Event listeners

Reactâ€™s **`useEffect` hook** allows us to perform these after rendering.

---

###  Example: Fetching user data using `useEffect`

jsx
// App.js
import { useEffect, useState } from 'react';

function App() {
  const [user, setUser] = useState(null);  // Local state to store API response

  useEffect(() => {
    // Side-effect: Fetching data when component mounts
    fetch('https://jsonplaceholder.typicode.com/users/1')
      .then(res => res.json())
      .then(data => setUser(data));   // Set response into state
  }, []);  // Empty array = run once after initial render (like componentDidMount)

  return (
    <div>
      <h1>useEffect Example</h1>
      {user ? (
        <div>
          <h2>Name: {user.name}</h2>
          <p>Email: {user.email}</p>
        </div>
      ) : (
        <p>Loading user info...</p>
      )}
    </div>
  );
}

export default App;


---

###  Explanation with Comments:

| Code                             | Meaning                                      |
| -------------------------------- | -------------------------------------------- |
| `useEffect(() => {...}, [])`     | Run only once (on mount)                     |
| `fetch(...).then(...).then(...)` | Standard API call                            |
| `setUser(data)`                  | Store result in state                        |
| `user ? ... : ...`               | Conditional rendering (show data or loading) |

---

###  Cleanup Example:

jsx
useEffect(() => {
  const timer = setInterval(() => {
    console.log("Running every second...");
  }, 1000);

  // Cleanup when component unmounts
  return () => {
    clearInterval(timer);
  };
}, []);

This prevents memory leaks by **cleaning up** after the component unmounts.



###  Output Summary:

* Shows user name and email after fetching data
* Shows "Loading..." while waiting
* Handles API fetch using side effect

