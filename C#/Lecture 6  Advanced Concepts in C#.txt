### **Lecture 6: Advanced Concepts in C# **  
In this lecture, we will dive deeper into **functions, recursion, and number-based problems** with real-world examples.  

---

## **1. Functions in C# (Code Reusability)**
A function helps us **avoid repeating code** and makes it reusable.  

###  Example: Calculate the Area of a Circle**
Imagine a **bank's security system** where cameras detect movement based on an area range.  

using System;

class Program {
    // Function to calculate area of a circle
    static double CalculateArea(double radius) {
        return Math.PI * radius * radius;
    }

    static void Main() {
        Console.Write("Enter radius of the circle: ");
        double radius = double.Parse(Console.ReadLine());

        double area = CalculateArea(radius);
        Console.WriteLine("Area of the circle: " + area);
    }
}

**Why use functions?**  
- Avoids repeating the formula  
- Makes code readable and reusable  

---

## **2. Recursion (Function Calling Itself)**
Recursion is when a function **calls itself** until a condition is met.  

###  Example: Factorial using Recursion**
A **hospital's software** calculates the number of ways patients can be arranged in a queue (factorial).  

using System;

class Program {
    static int Factorial(int n) {
        if (n == 1) return 1; // Base case
        return n * Factorial(n - 1); // Recursive call
    }

    static void Main() {
        Console.Write("Enter a number: ");
        int num = int.Parse(Console.ReadLine());

        Console.WriteLine("Factorial of " + num + " is: " + Factorial(num));
    }
}

**Why use recursion?**  
- Best for problems like **Factorial, Fibonacci**  
- Reduces the need for loops  

---

## **3. Armstrong Number (Real-World Example: Banking Security)**
An **Armstrong number** is a number where the sum of its digits raised to the power of the total digits equals the number itself.  

**Example:**  
- `153` → \(1^3 + 5^3 + 3^3 = 153\)  
- `9474` → \(9^4 + 4^4 + 7^4 + 4^4 = 9474\)  

###  Example: Check if a Number is Armstrong**
Used in **banking security** to verify PIN authenticity.  

using System;

class Program {
    static bool IsArmstrong(int num) {
        int sum = 0, temp = num, digits = num.ToString().Length;

        while (temp > 0) {
            int digit = temp % 10;
            sum += (int)Math.Pow(digit, digits);
            temp /= 10;
        }

        return sum == num;
    }

    static void Main() {
        Console.Write("Enter a number: ");
        int num = int.Parse(Console.ReadLine());

        if (IsArmstrong(num)) 
            Console.WriteLine(num + " is an Armstrong number.");
        else 
            Console.WriteLine(num + " is NOT an Armstrong number.");
    }
}

 **Where is it used?**  
- Secure PIN authentication  
- Unique ID validation  

---

## **4. Palindrome Number (Used in Data Validation)**
A **palindrome number** is the same when reversed.  

**Examples:**  
- `121`, `1331`, `4554` are palindromes  
- `123`, `678` are **not**  

###  Example: Check if a Number is Palindrome**
Used in **database systems** for checking transaction IDs.  


using System;

class Program {
    static bool IsPalindrome(int num) {
        int temp = num, rev = 0;

        while (temp > 0) {
            int digit = temp % 10;
            rev = rev * 10 + digit;
            temp /= 10;
        }

        return num == rev;
    }

    static void Main() {
        Console.Write("Enter a number: ");
        int num = int.Parse(Console.ReadLine());

        if (IsPalindrome(num))
            Console.WriteLine(num + " is a Palindrome.");
        else
            Console.WriteLine(num + " is NOT a Palindrome.");
    }
}

**Where is it used?**  
- **Banking transactions** (validate reference IDs)  
- **Medical records** (check data integrity)  

---

## **5. Strong Number (Used in Cryptography)**
A **Strong Number** is a number where the sum of the factorials of its digits equals the number itself.  

 **Example:**  
- `145` → \(1! + 4! + 5! = 145\)  

###  Example: Check if a Number is Strong**
Used in **password encryption** to strengthen security.  

using System;

class Program {
    static int Factorial(int n) {
        if (n == 0) return 1;
        int fact = 1;
        for (int i = 1; i <= n; i++)
            fact *= i;
        return fact;
    }

    static bool IsStrong(int num) {
        int sum = 0, temp = num;

        while (temp > 0) {
            sum += Factorial(temp % 10);
            temp /= 10;
        }

        return sum == num;
    }

    static void Main() {
        Console.Write("Enter a number: ");
        int num = int.Parse(Console.ReadLine());

        if (IsStrong(num))
            Console.WriteLine(num + " is a Strong Number.");
        else
            Console.WriteLine(num + " is NOT a Strong Number.");
    }
}

**Where is it used?**  
- **Cybersecurity** (strong passwords)  
- **Data protection** (encryption techniques)  

---

## **Summary of Lecture 3**
| Concept | Use Case | Example |
|---------|----------|---------|
| **Functions** | Code reusability | Area of a Circle |
| **Recursion** | Simplifying complex problems | Factorial Calculation |
| **Armstrong Number** | Secure PIN validation | 153, 9474 |
| **Palindrome Number** | Transaction & Data Validation | 121, 4554 |
| **Strong Number** | Cryptography & Security | 145 |

---