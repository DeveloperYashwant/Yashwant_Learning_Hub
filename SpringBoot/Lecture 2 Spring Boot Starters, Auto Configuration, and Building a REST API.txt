### Lecture 2: **Spring Boot Architecture**

---

#### **1. Introduction to Spring Boot Architecture**

Spring Boot simplifies the configuration and setup of Spring-based applications. It uses a convention-over-configuration approach and eliminates much of the boilerplate configuration, making it easier to set up and deploy Spring applications. 

The architecture of Spring Boot follows the principles of **Spring Framework** and introduces several enhancements that make development more efficient and productive.

---

#### **2. Components of Spring Boot Architecture**

Spring Boot architecture is built around several key components. These components work together to provide an easy-to-use framework for creating Java applications. Here are the primary components:

1. **Spring Boot Auto-Configuration**:
   - Spring Boot's auto-configuration feature is a powerful part of its architecture. It tries to automatically configure your Spring application based on the libraries on the classpath.
   - It reduces the need for explicit configuration by inspecting the project dependencies and providing default configurations for components like DataSource, JPA, Thymeleaf, etc.

2. **Spring Boot Starter**:
   - Spring Boot starters are predefined sets of dependencies that are grouped based on common functionality.
   - Examples include:
     - `spring-boot-starter-web`: for building web applications.
     - `spring-boot-starter-data-jpa`: for integrating JPA.
     - `spring-boot-starter-test`: for testing Spring Boot applications.

3. **Spring Boot CLI (Command Line Interface)**:
   - Spring Boot CLI is a command-line tool that can be used to quickly prototype Spring applications.
   - It allows you to run Groovy scripts and Java code directly without having to go through the whole build process.

4. **Embedded Web Server**:
   - Spring Boot comes with an embedded web server (like **Tomcat**, **Jetty**, or **Undertow**), so you don’t need to install a separate web server.
   - It makes it easy to create stand-alone, production-grade Spring-based applications.

5. **Spring Boot Application**:
   - The heart of the Spring Boot architecture is the main application class annotated with `@SpringBootApplication`.
   - This annotation is a combination of several annotations like `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan` that are used to set up the application.

6. **Application Properties / YAML Configuration**:
   - Spring Boot allows you to configure application-specific properties using `application.properties` or `application.yml` files. These files store configuration settings like database connections, logging, server settings, and more.
   - It simplifies the process of managing different configurations across environments (e.g., dev, prod).

---

#### **3. Key Features of Spring Boot Architecture**

1. **Inversion of Control (IoC) Container**:
   - Like the Spring Framework, Spring Boot uses the **IoC container** to manage beans and their dependencies. Spring Boot uses **Dependency Injection (DI)** to provide objects with their required dependencies.

2. **Embedded Servers**:
   - Spring Boot provides support for embedded servers, such as Tomcat, Jetty, and Undertow. This means that Spring Boot applications can be packaged as self-contained JAR files with the web server embedded, eliminating the need for a separate application server.

3. **Standalone Applications**:
   - Spring Boot enables the creation of stand-alone applications that can run directly without needing to deploy them to an external server. This is made possible with the embedded servers and the main class annotated with `@SpringBootApplication`.

4. **Auto-Configuration**:
   - Spring Boot’s **auto-configuration** mechanism automatically configures components of the application (like data sources, message queues, etc.) based on the project dependencies and classpath.
   - It simplifies the process of setting up the application and reduces the need for XML configuration files or manual setup.

5. **Actuator**:
   - The **Spring Boot Actuator** is a set of production-ready features that help you monitor and manage your application. It provides insights into metrics, health checks, environment details, and more.
   - It’s integrated with Spring Boot to give you real-time data about your application.

---

#### **4. Workflow of a Spring Boot Application**

A typical Spring Boot application follows this general workflow:

1. **Startup**:
   - When the application starts, the `main()` method in the main class (annotated with `@SpringBootApplication`) is invoked.
   - Spring Boot initializes the application context, loads the necessary beans, and starts the embedded web server.

2. **Dependency Injection**:
   - Spring Boot automatically manages the dependencies between beans using the **IoC container**. This is achieved through **constructor injection** or **field injection**.
   
3. **Auto-Configuration**:
   - Spring Boot’s **auto-configuration** class checks the classpath and automatically configures the required beans based on the libraries present.
   - For example, if Spring Boot detects that Spring Data JPA is on the classpath, it will automatically configure the database connections.

4. **Serving Requests**:
   - Once the application context is initialized and the dependencies are injected, Spring Boot starts accepting HTTP requests.
   - The embedded server (Tomcat, Jetty, etc.) starts listening for incoming requests and dispatches them to appropriate controllers.

5. **Closing**:
   - When the application stops, Spring Boot handles the proper shutdown of the application, including cleaning up resources, closing database connections, and shutting down the embedded server.

---

#### **5. Spring Boot Architecture Diagram**

Below is a high-level view of the architecture:

```
        +-------------------------+
        |       Application       |
        |     (Spring Boot App)   |
        +-------------------------+
                 |
          @SpringBootApplication
                 |
        +-------------------------+
        |     Main Class (entry)  |
        +-------------------------+
                 |
        +-------------------------+
        |     Embedded Server     |
        |   (Tomcat, Jetty, etc.) |
        +-------------------------+
                 |
        +-------------------------+
        |        Controllers      |
        |      (REST, MVC)        |
        +-------------------------+
                 |
        +-------------------------+
        |       Service Layer     |
        |    (Business Logic)     |
        +-------------------------+
                 |
        +-------------------------+
        |     Data Layer (JPA)    |
        |  (Database Interaction) |
        +-------------------------+
```

---

#### **6. Spring Boot Configuration Files**

- **`application.properties` / `application.yml`**:
  - These are configuration files where you can set different properties for your application, such as database connection details, server port, logging levels, and more.

Example of `application.properties`:
```properties
# Server Port
server.port=8081

# Database Connection
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=root
spring.datasource.password=secret
```

Example of `application.yml`:
```yaml
server:
  port: 8081

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/mydb
    username: root
    password: secret
```

- These files can be used to configure different environments (e.g., `application-dev.properties`, `application-prod.properties`) and enable Spring Profiles to switch between them.

---

#### **7. Benefits of Spring Boot Architecture**

1. **Simplified Setup**: With embedded servers and auto-configuration, Spring Boot reduces the complexity of setting up a Spring-based application.
2. **Minimal Configuration**: By leveraging auto-configuration and Spring starters, developers don’t need to write verbose configuration files, making the application easier to manage.
3. **Standalone Deployment**: Spring Boot allows applications to be packaged as a single executable JAR or WAR file, which can be deployed without requiring a separate web server.
4. **Microservices Ready**: The Spring Boot architecture is designed to be highly suitable for developing microservices applications, where each service can be deployed independently.
5. **Extensive Ecosystem**: With Spring Boot, you have access to the entire Spring ecosystem, which includes tools for security, messaging, persistence, and more.

---

#### **8. Conclusion**

In this lecture, we’ve discussed the **Spring Boot Architecture**:
- **Auto-Configuration**, **Spring Boot Starters**, and **Embedded Web Servers** are some of the core features that make Spring Boot development easier.
- We explored how **DI (Dependency Injection)** is a core part of the Spring Boot architecture, promoting loose coupling and easier testing.
- We also touched on how the **main class** and **embedded servers** work together to start and run the application.


### Lecture 2: Spring Boot Starters, Auto Configuration, and Building a REST API

---

#### 1. **Spring Boot Starters**
   - **What are Starters?**
     - **Spring Boot Starters** are a set of pre-configured dependencies to help you set up and configure Spring Boot applications with minimal effort.
     - They are groups of commonly used dependencies for specific features. For example, if you need to build a web application, you can use `spring-boot-starter-web`.
   
   - **Common Starters in Spring Boot:**
     - **spring-boot-starter-web**: Used for building web applications, including RESTful applications using Spring MVC.
     - **spring-boot-starter-data-jpa**: Used for integrating JPA (Java Persistence API) with Spring Boot for database operations.
     - **spring-boot-starter-thymeleaf**: Used for building web applications with Thymeleaf templates.
     - **spring-boot-starter-test**: Provides testing utilities and frameworks like JUnit, Hamcrest, and Mockito for unit testing Spring Boot applications.
     - **spring-boot-starter-logging**: Includes logging libraries such as Logback.
     - **spring-boot-starter-security**: For adding security features to your application.

   - **How to Add Starters**
     - When creating a Spring Boot project using the **Spring Initializr**, you can select the necessary starters.
     - Alternatively, you can manually add dependencies in your `pom.xml` (for Maven) or `build.gradle` (for Gradle).

     **Example for Maven (pom.xml):**

     ```xml
     <dependencies>
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-web</artifactId>
         </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-data-jpa</artifactId>
         </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-test</artifactId>
             <scope>test</scope>
         </dependency>
     </dependencies>
     

#### 2. **Spring Boot Auto Configuration**
   - **What is Auto Configuration?**
     - Spring Boot Auto Configuration automatically configures the Spring application context based on the libraries present in your project.
     - For example, if Spring Boot detects `spring-boot-starter-web` in your dependencies, it automatically configures the necessary beans for a web application (like an embedded server).
   
   - **How Does It Work?**
     - When the application starts, Spring Boot scans for available classes, configuration files, and libraries, and then applies appropriate configuration based on what is found.
     - It uses **conditional annotations** to apply configurations only if certain classes or beans are available in the context.
   
   - **Example:**
     - If you add the `spring-boot-starter-data-jpa` dependency, Spring Boot automatically configures the **EntityManagerFactory**, **DataSource**, and **JpaTransactionManager** beans.

     **Example of Conditional Configuration:**

     java
     @Configuration
     @ConditionalOnClass(DataSource.class)
     public class DataSourceAutoConfiguration {
         // Automatically configure a DataSource if DataSource class is present
     }
     
#### 3. **Building a Simple REST API with Spring Boot**

   - **Step 1: Define the Model (Entity)**

     java
     package com.example.demo.model;

     import javax.persistence.Entity;
     import javax.persistence.Id;

     @Entity
     public class Product {

         @Id
         private Long id;
         private String name;
         private Double price;

         // Constructors, Getters, Setters
     }
     
   - **Step 2: Create the Repository Layer**

     java
     package com.example.demo.repository;

     import com.example.demo.model.Product;
     import org.springframework.data.jpa.repository.JpaRepository;

     public interface ProductRepository extends JpaRepository<Product, Long> {
     }
     
   - **Step 3: Create the Service Layer**

     java
     package com.example.demo.service;

     import com.example.demo.model.Product;
     import com.example.demo.repository.ProductRepository;
     import org.springframework.beans.factory.annotation.Autowired;
     import org.springframework.stereotype.Service;

     import java.util.List;

     @Service
     public class ProductService {

         @Autowired
         private ProductRepository productRepository;

         public List<Product> getAllProducts() {
             return productRepository.findAll();
         }

         public Product getProductById(Long id) {
             return productRepository.findById(id).orElse(null);
         }

         public Product createProduct(Product product) {
             return productRepository.save(product);
         }

         public void deleteProduct(Long id) {
             productRepository.deleteById(id);
         }
     }
     ```

   - **Step 4: Create the Controller Layer**

     java
     package com.example.demo.controller;

     import com.example.demo.model.Product;
     import com.example.demo.service.ProductService;
     import org.springframework.beans.factory.annotation.Autowired;
     import org.springframework.web.bind.annotation.*;

     import java.util.List;

     @RestController
     @RequestMapping("/api/products")
     public class ProductController {

         @Autowired
         private ProductService productService;

         @GetMapping
         public List<Product> getAllProducts() {
             return productService.getAllProducts();
         }

         @GetMapping("/{id}")
         public Product getProduct(@PathVariable Long id) {
             return productService.getProductById(id);
         }

         @PostMapping
         public Product createProduct(@RequestBody Product product) {
             return productService.createProduct(product);
         }

         @DeleteMapping("/{id}")
         public void deleteProduct(@PathVariable Long id) {
             productService.deleteProduct(id);
         }
     }
     
#### 4. **Testing the API**
   - Run the Spring Boot application by executing the `DemoApplication` class or by using the Maven command:
     bash
     mvn spring-boot:run
     
   - Open your browser or use a tool like **Postman** to test the API:
     - **GET** `http://localhost:8080/api/products` → Retrieve all products.
     - **GET** `http://localhost:8080/api/products/{id}` → Retrieve a specific product by ID.
     - **POST** `http://localhost:8080/api/products` → Create a new product.
     - **DELETE** `http://localhost:8080/api/products/{id}` → Delete a product by ID.

#### 5. **Spring Boot Actuator (Optional)**
   - **What is Spring Boot Actuator?**
     - Spring Boot Actuator provides production-ready features like monitoring, metrics, health checks, and application insights.
     - It exposes useful endpoints for monitoring and managing the Spring Boot application.
   
   - **Adding Spring Boot Actuator**
     - To add Actuator to your project, simply include the `spring-boot-starter-actuator` dependency:
     
     xml
     <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-actuator</artifactId>
     </dependency>
     
   - **Common Actuator Endpoints**
     - `/actuator/health`: Provides the health status of your application.
     - `/actuator/metrics`: Exposes application metrics (e.g., memory usage, request count).
     - `/actuator/info`: Provides custom information about your application.

---

### **Conclusion**
In this lecture, we covered:
- The concept of **Spring Boot Starters** and how they simplify the addition of dependencies.
- **Auto Configuration** in Spring Boot and how it configures beans automatically based on the project's dependencies.
- How to build a simple **REST API** using Spring Boot, including the Model, Repository, Service, and Controller layers.
- Optionally, we discussed **Spring Boot Actuator** for monitoring and managing production-ready applications.