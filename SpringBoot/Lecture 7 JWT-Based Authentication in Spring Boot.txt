### Lecture 7: **JWT-Based Authentication in Spring Boot**

---

#### **1. Introduction to JWT (JSON Web Token)**

**JWT (JSON Web Token)** is a compact, URL-safe means of representing claims to be transferred between two parties. It is widely used for securing REST APIs.

A **JWT** is made up of three parts:

1. **Header**: Contains information about how the token is signed, usually with the algorithm (e.g., `HS256`).
2. **Payload**: Contains the claims or data (e.g., user ID, roles, etc.). It’s base64-encoded.
3. **Signature**: Ensures the integrity of the token and its authenticity. It’s generated by signing the header and payload with a secret key.

---

#### **2. Why Use JWT?**

- **Stateless**: No need to store session information on the server (this reduces server load).
- **Self-contained**: JWT contains all the user-related information.
- **Compact and URL-safe**: It’s small and can be transmitted through URL, POST parameters, or HTTP headers.

---

#### **3. JWT Structure**

A JWT token has three parts:
- **Header**: Contains information about the type of token and the signing algorithm.
  - Example: `{"alg": "HS256", "typ": "JWT"}`
  
- **Payload**: Contains the claims, which are statements about an entity (typically the user) and additional data.
  - Example: `{"sub": "user", "role": "USER", "iat": 1516239022}`
  
- **Signature**: The signature is used to verify the integrity of the token.
  - Example: `HMACSHA256(
    base64UrlEncode(header) + "." + base64UrlEncode(payload),
    secretKey)`
  
The JWT is formed as:

```
<Header>.<Payload>.<Signature>
```

---

#### **4. Setting Up JWT Authentication in Spring Boot**

We will now set up **JWT authentication** in a Spring Boot application.

---

#### **5. Dependencies for Maven**

Add the following dependencies to your `pom.xml`.

```xml
<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot Starter Security -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Spring Boot Starter JWT (json-web-token) -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.11.5</version>
    </dependency>
</dependencies>
```

---

#### **6. JWT Utility Class**

First, let's create a utility class to **generate and validate** the JWT.

##### **JWTUtil Class**

```java
import io.jsonwebtoken.*;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class JWTUtil {

    private String secretKey = "secretkey"; // You should store this in a secure way

    // Method to generate the token
    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)) // 1 hour validity
                .signWith(SignatureAlgorithm.HS256, secretKey)
                .compact();
    }

    // Method to validate the token
    public boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token); // Parses and validates the token
            return true;
        } catch (JwtException e) {
            return false; // Invalid token
        }
    }

    // Method to extract the username from the token
    public String extractUsername(String token) {
        return Jwts.parser()
                .setSigningKey(secretKey)
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }
}
```

- **`generateToken`**: Generates a JWT token with a subject (username) and expiration time.
- **`validateToken`**: Checks if the token is valid or not (e.g., has expired or been tampered).
- **`extractUsername`**: Extracts the username from the token.

---

#### **7. JWT Authentication Filter**

The filter will intercept the request and check for the **Authorization header** containing the JWT.

##### **JWTAuthenticationFilter Class**

```java
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@Component
@WebFilter("/api/*")
public class JWTAuthenticationFilter extends OncePerRequestFilter {

    private final JWTUtil jwtUtil;

    public JWTAuthenticationFilter(JWTUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String token = getTokenFromRequest(request);

        if (token != null && jwtUtil.validateToken(token)) {
            String username = jwtUtil.extractUsername(token);
            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                    username, null, null);
            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
            SecurityContextHolder.getContext().setAuthentication(authentication);
        }

        filterChain.doFilter(request, response);
    }

    private String getTokenFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7); // Remove "Bearer " prefix
        }
        return null;
    }
}
```

- **JWTAuthenticationFilter**: This filter intercepts each request, checks for the `Authorization` header, and validates the JWT token. If valid, it authenticates the user.

---

#### **8. Security Configuration Class**

Now, let's modify the `SecurityConfig` class to integrate the JWT filter.

##### **SecurityConfig Class**

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    private final JWTAuthenticationFilter jwtAuthenticationFilter;

    public SecurityConfig(JWTAuthenticationFilter jwtAuthenticationFilter) {
        this.jwtAuthenticationFilter = jwtAuthenticationFilter;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeRequests()
                .antMatchers("/auth/**").permitAll() // Public endpoints
                .anyRequest().authenticated() // Secure all other requests
            .and()
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class); // Add JWT filter
    }
}
```

- **SecurityConfig**: Configures HTTP security by disabling CSRF and securing routes. It allows unauthenticated access to the `/auth/**` endpoints (e.g., login) and secures all other routes.

---

#### **9. Login Endpoint to Generate JWT**

Create a controller with a login endpoint that generates a JWT when a user logs in successfully.

##### **AuthController**

```java
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
public class AuthController {

    private final AuthenticationManager authenticationManager;
    private final JWTUtil jwtUtil;

    public AuthController(AuthenticationManager authenticationManager, JWTUtil jwtUtil) {
        this.authenticationManager = authenticationManager;
        this.jwtUtil = jwtUtil;
    }

    @PostMapping("/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
        return jwtUtil.generateToken(username);
    }
}
```

- **AuthController**: The `/auth/login` endpoint allows users to authenticate and receive a JWT token if their credentials are valid.

---

#### **10. Testing JWT Authentication**

To test the authentication:
1. **Login**:
   - Send a POST request to `/auth/login` with username and password (e.g., `user` and `password123`).
   - Response will contain a JWT token.

2. **Access Protected Resources**:
   - Send a GET request to a protected resource (e.g., `/api/user`).
   - In the request headers, include the JWT token in the `Authorization` header:
     ```
     Authorization: Bearer <your-jwt-token>
     ```
   - The request will be authenticated, and if the token is valid, the user will gain access to the resource.

---

#### **11. Conclusion**

In this lecture, we have learned how to secure a Spring Boot application using **JWT-based authentication**, which includes:

- Generating and validating JWT tokens.
- Setting up a custom `JWTAuthenticationFilter` to intercept and validate requests.
- Securing endpoints with Spring Security.
- Creating a login endpoint to generate JWT tokens.
