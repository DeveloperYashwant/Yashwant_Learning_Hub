
## Full Spring Boot CRUD Application – Step by Step

---

###  **1. Set Up the Project**

Use [https://start.spring.io](https://start.spring.io) and include:

* **Spring Web**
* **Spring Data JPA**
* **H2 Database**
* (Optional) Spring Boot DevTools

---

###  **2. Define the Entity – `Student.java`**

java
@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;

    // Getters and Setters
}


---

###  **3. Create Repository – `StudentRepository.java`**

java
public interface StudentRepository extends JpaRepository<Student, Long> {
}

---

###  **4. Create Service (Optional but Good Practice)**

java
@Service
public class StudentService {
    @Autowired
    private StudentRepository repo;

    public List<Student> getAll() {
        return repo.findAll();
    }

    public Student getById(Long id) {
        return repo.findById(id).orElse(null);
    }

    public Student create(Student s) {
        return repo.save(s);
    }

    public Student update(Long id, Student s) {
        Student existing = repo.findById(id).orElse(null);
        if (existing != null) {
            existing.setName(s.getName());
            existing.setEmail(s.getEmail());
            return repo.save(existing);
        }
        return null;
    }

    public void delete(Long id) {
        repo.deleteById(id);
    }
}


---

### **5. Create Controller – `StudentController.java`**

java
@RestController
@RequestMapping("/students")
public class StudentController {

    @Autowired
    private StudentService service;

    @GetMapping
    public List<Student> getAll() {
        return service.getAll();
    }

    @GetMapping("/{id}")
    public Student getOne(@PathVariable Long id) {
        return service.getById(id);
    }

    @PostMapping
    public Student create(@RequestBody Student student) {
        return service.create(student);
    }

    @PutMapping("/{id}")
    public Student update(@PathVariable Long id, @RequestBody Student student) {
        return service.update(id, student);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.delete(id);
    }
}


---

### **6. Configure `application.properties`**

properties
# H2 In-memory DB
spring.datasource.url=jdbc:h2:mem:studentdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.hibernate.ddl-auto=update
spring.h2.console.enabled=true


Visit: [http://localhost:8080/h2-console](http://localhost:8080/h2-console)

---

###  **7. Test With Postman or Swagger**

* `POST /students` – Add a student
* `GET /students` – Get all students
* `GET /students/{id}` – Get one student
* `PUT /students/{id}` – Update student
* `DELETE /students/{id}` – Delete student

