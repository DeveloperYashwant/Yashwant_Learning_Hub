# **CSS Lecture 9: Responsive Web Design with CSS**  


## **1. What is Responsive Web Design?**  
Responsive Web Design (RWD) allows a webpage to **adapt to different screen sizes** without needing separate mobile and desktop versions.  

**Key Features of RWD**:  
- **Fluid Layouts** (Use percentages instead of fixed pixels)  
- **Flexible Images** (Images adjust to fit the screen)  
- **Media Queries** (Apply different styles for different screen sizes)  

---

## **2. Viewport Meta Tag (Important for Mobile Devices)**
To ensure a webpage scales properly on mobile screens, add this in the `<head>` of your HTML:

<meta name="viewport" content="width=device-width, initial-scale=1.0">

---

## **3. CSS Units for Responsive Design**  
Instead of using **fixed pixels (`px`)**, use these **flexible units**:  

| Unit | Description | Example |
|------|------------|---------|
| `%`  | Percentage of parent element | `width: 50%;` |
| `em` | Relative to parent font size | `font-size: 2em;` |
| `rem` | Relative to root font size | `font-size: 1.5rem;` |
| `vh` | Percentage of viewport height | `height: 100vh;` |
| `vw` | Percentage of viewport width | `width: 80vw;` |

---

## **4. Flexible Grid Layout with `minmax()`**  
Instead of using fixed column widths, use the `minmax()` function for **responsive grids**.

### **Example: Grid with Flexible Columns**

.container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 10px;
}

## **5. CSS Flexbox for Responsive Layouts**  
Flexbox is **great for aligning items** in a row/column.  
### **Example: Centering Elements Using Flexbox**

.container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

`flex-wrap: wrap;` ensures items wrap onto a new line on small screens.

---

## **6. Media Queries: Apply Styles Based on Screen Size**  
Media queries allow you to apply **different CSS styles** for different screen sizes.

### **Example: Changing Layout for Mobile Screens**

/* Default Styles for Large Screens */
.container {
  display: flex;
  flex-direction: row;
}

/* Styles for Screens Smaller than 768px (Tablets & Mobile) */
@media screen and (max-width: 768px) {
  .container {
    flex-direction: column;
  }
}

**Breakpoints** (Common screen sizes for media queries):  
| Device | Screen Width |
|--------|-------------|
| Desktop | `min-width: 1024px` |
| Tablet | `max-width: 768px` |
| Mobile | `max-width: 480px` |

---

## **7. Responsive Images & Videos**
### **Making Images Responsive**

img {
  max-width: 100%;
  height: auto;
}

Ensures the image scales down on smaller screens.

### **Making Videos Responsive**
Use a **wrapper div** to make videos responsive:

.video-container {
  position: relative;
  padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
  height: 0;
}
.video-container iframe {
  position: absolute;
  width: 100%;
  height: 100%;
}

---

## **8. Example: Fully Responsive Web Page**

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Web Page</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            padding: 20px;
        }
        .box {
            width: 30%;
            background: lightblue;
            padding: 20px;
            text-align: center;
            margin: 10px;
        }
        /* Responsive: Make Boxes Stack on Small Screens */
        @media screen and (max-width: 768px) {
            .box {
                width: 100%;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <div class="box">Box 1</div>
        <div class="box">Box 2</div>
        <div class="box">Box 3</div>
    </div>

</body>
</html>

**Desktop View**: 3 boxes side by side.  
**Mobile View**: Boxes stack vertically.

---

## **9. Best Practices for Responsive Design**
**Always use `width: 100%` for images**  
**Use `flex-wrap` or `grid-template-columns: auto-fit` for grids**  
**Use `rem` instead of `px` for text sizes**  
**Test on different screen sizes (Chrome DevTools: `F12 > Toggle Device Toolbar`)**  
